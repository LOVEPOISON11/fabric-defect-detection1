name: Flask App Build + Deployment to GitHub Pages

on:
  # Runs on push to any of the below branches
  push:
    branches:
      - main

  # Runs on pull request events that target one of the below branches
  pull_request:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab of the repository
  workflow_dispatch:

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  # Python version to use
  PYTHON_VERSION: 3.11

  # Ensures Python uses UTF-8 encoding by default
  PYTHONUTF8: 1

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install gunicorn

    - name: Create static build directory
      run: |
        mkdir -p build
        cp -r templates build/
        cp -r models build/ || echo "Models directory not found, skipping"
        cp -r static build/ || mkdir -p build/static
        cp api/index.py build/
        cp fabric_defect_detector*.py build/ || echo "Detector files not found, skipping"

    - name: Create index.html for GitHub Pages
      run: |
        cat > build/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Fabric Defect Detection</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; text-align: center; }
                .container { max-width: 800px; margin: 0 auto; }
                .note { background: #f0f8ff; padding: 20px; border-radius: 8px; margin: 20px 0; }
                .links { margin: 30px 0; }
                .links a { display: inline-block; margin: 10px; padding: 12px 24px; background: #007bff; color: white; text-decoration: none; border-radius: 5px; }
                .links a:hover { background: #0056b3; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üßµ Fabric Defect Detection System</h1>
                <div class="note">
                    <h3>üìã Project Information</h3>
                    <p>This is a Flask-based fabric defect detection system using computer vision and machine learning.</p>
                    <p><strong>Note:</strong> This static deployment shows the project structure. For full functionality, deploy to a platform that supports Python backends like Vercel, Heroku, or Railway.</p>
                </div>

                <div class="links">
                    <h3>üîó Quick Links</h3>
                    <a href="templates/index.html">View Main Interface</a>
                    <a href="templates/camera.html">View Camera Interface</a>
                    <a href="https://github.com/${{ github.repository }}">View Source Code</a>
                </div>

                <div class="note">
                    <h3>üöÄ Deployment Options</h3>
                    <p><strong>Vercel:</strong> Already configured with vercel.json</p>
                    <p><strong>Heroku:</strong> Add Procfile for deployment</p>
                    <p><strong>Railway:</strong> Direct deployment from GitHub</p>
                </div>

                <div class="note">
                    <h3>üìÅ Project Structure</h3>
                    <ul style="text-align: left; display: inline-block;">
                        <li><code>app.py</code> - Main Flask application</li>
                        <li><code>api/index.py</code> - Vercel-optimized entry point</li>
                        <li><code>fabric_defect_detector.py</code> - AI detection logic</li>
                        <li><code>templates/</code> - HTML templates</li>
                        <li><code>models/</code> - ML model files</li>
                        <li><code>requirements.txt</code> - Python dependencies</li>
                        <li><code>vercel.json</code> - Vercel deployment config</li>
                    </ul>
                </div>
            </div>
        </body>
        </html>
        EOF

    - name: Upload Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        name: web-build-artifact
        path: build

  deploy:
    needs: build

    runs-on: ubuntu-latest

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Deploy to GitHub Pages üöÄ
        if: github.event_name == 'push'  # deploy only on push
        id: deployment
        uses: actions/deploy-pages@v4.0.5
        with:
          artifact_name: web-build-artifact
